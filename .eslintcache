[{"/Users/devendra/Desktop/POC/poc-bot-builder/src/index.tsx":"1","/Users/devendra/Desktop/POC/poc-bot-builder/src/reportWebVitals.ts":"2","/Users/devendra/Desktop/POC/poc-bot-builder/src/App.tsx":"3","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/index.tsx":"4","/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/index.tsx":"5","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/Creator/index.tsx":"6","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/NodeEditor/index.tsx":"7","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DiagramPreview/index.tsx":"8","/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/Home/index.tsx":"9","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/NodeBlock/index.tsx":"10","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DraggableComponent/index.tsx":"11","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/index.tsx":"12","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DesignMenu/index.tsx":"13","/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/NotFound/index.tsx":"14","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/common/Layout/index.tsx":"15","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/common/Loader/index.tsx":"16","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/Creator/data.js":"17","/Users/devendra/Desktop/POC/poc-bot-builder/src/utils/helpers.ts":"18","/Users/devendra/Desktop/POC/poc-bot-builder/src/constants/index.js":"19","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/index.tsx":"20","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/Decision/index.tsx":"21","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/Reset/index.tsx":"22","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/WorkflowSwitch/index.tsx":"23","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/Response/index.tsx":"24","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/Webhook/index.tsx":"25","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/API/index.tsx":"26","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/AgentHandover/index.tsx":"27","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/End/index.tsx":"28","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/NotFound/index.tsx":"29","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/Utterance/index.tsx":"30","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/WorkFlowTab/index.tsx":"31","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/ActionBar/index.tsx":"32","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/ImportDialog/index.js":"33","/Users/devendra/Desktop/POC/poc-bot-builder/src/utils/validateFlowJSON.ts":"34"},{"size":648,"mtime":1627575430899,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1609911194000,"results":"37","hashOfConfig":"36"},{"size":531,"mtime":1626442372167,"results":"38","hashOfConfig":"36"},{"size":592,"mtime":1627745572773,"results":"39","hashOfConfig":"36"},{"size":153,"mtime":1626585548468,"results":"40","hashOfConfig":"36"},{"size":8276,"mtime":1627802494160,"results":"41","hashOfConfig":"36"},{"size":764,"mtime":1627802720653,"results":"42","hashOfConfig":"36"},{"size":1609,"mtime":1627798575153,"results":"43","hashOfConfig":"36"},{"size":173,"mtime":1626443449640,"results":"44","hashOfConfig":"36"},{"size":944,"mtime":1627802706248,"results":"45","hashOfConfig":"36"},{"size":1020,"mtime":1627802689977,"results":"46","hashOfConfig":"36"},{"size":1291,"mtime":1627802637583,"results":"47","hashOfConfig":"36"},{"size":731,"mtime":1627735269687,"results":"48","hashOfConfig":"36"},{"size":220,"mtime":1626442041240,"results":"49","hashOfConfig":"36"},{"size":188,"mtime":1627745468807,"results":"50","hashOfConfig":"36"},{"size":82,"mtime":1626585440168,"results":"51","hashOfConfig":"36"},{"size":4097,"mtime":1627802428325,"results":"52","hashOfConfig":"36"},{"size":194,"mtime":1626694071195,"results":"53","hashOfConfig":"36"},{"size":342,"mtime":1627798236463,"results":"54","hashOfConfig":"36"},{"size":477,"mtime":1626705403388,"results":"55","hashOfConfig":"36"},{"size":751,"mtime":1627046579606,"results":"56","hashOfConfig":"36"},{"size":742,"mtime":1627046592313,"results":"57","hashOfConfig":"36"},{"size":769,"mtime":1627046607056,"results":"58","hashOfConfig":"36"},{"size":751,"mtime":1627046595947,"results":"59","hashOfConfig":"36"},{"size":748,"mtime":1627046603464,"results":"60","hashOfConfig":"36"},{"size":736,"mtime":1627046575402,"results":"61","hashOfConfig":"36"},{"size":1147,"mtime":1627044922889,"results":"62","hashOfConfig":"36"},{"size":736,"mtime":1627046583986,"results":"63","hashOfConfig":"36"},{"size":142,"mtime":1627046588250,"results":"64","hashOfConfig":"36"},{"size":754,"mtime":1627046599288,"results":"65","hashOfConfig":"36"},{"size":1446,"mtime":1627750064457,"results":"66","hashOfConfig":"36"},{"size":4286,"mtime":1627799184872,"results":"67","hashOfConfig":"36"},{"size":1617,"mtime":1627796049540,"results":"68","hashOfConfig":"36"},{"size":475,"mtime":1627796899278,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1dtcyry",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/devendra/Desktop/POC/poc-bot-builder/src/index.tsx",[],["142","143"],"/Users/devendra/Desktop/POC/poc-bot-builder/src/reportWebVitals.ts",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/App.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/Creator/index.tsx",["144","145"],"import { useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport _ from \"lodash\";\nimport {\n  createSchema,\n  useSchema,\n  //   validateNode,\n  //   validateNodes,\n  //   validateSchema,\n  //   validateLink,\n  //   validateLinks,\n  //   validatePort,\n} from \"beautiful-react-diagrams\";\n\nimport { canAllowToLink } from \"../../utils/helpers\";\nimport { types } from \"../../constants\";\nimport {\n  NodeBlock,\n  DiagramPreview,\n  DesignMenu,\n  SidebarEditor,\n} from \"../../components\";\nimport { availableNodesData, diagramData } from \"./data\";\n\nconst ConstantNodeBlock: any = {\n  NodeBlock: NodeBlock,\n};\n\nconst ConstantCanLink: any = {\n  canAllowToLink: canAllowToLink,\n};\n\nconst Creator = () => {\n  const [availableNodes] = useState<any>(availableNodesData);\n\n  let deleteNodeFromSchema: any;\n\n  const [workFlowState, setWorkFlowState] = useState<any>({});\n\n  const [sidebarState, setSidebarState] = useState<any>({\n    isOpen: false,\n    data: {},\n  });\n\n  const getInitialNode: any = () => {\n    let nodes: any = [];\n    let links: any = [];\n\n    nodes = diagramData?.nodes?.map((node: any) => {\n      const _input = node?.inputs || [];\n      const _output = node?.outputs || [];\n      let inputs = [];\n      let outputs = [];\n\n      if (_input.length) {\n        inputs = _input.map((input: any) => {\n          return {\n            ...input,\n            canLink: ConstantCanLink[input?.canLink],\n          };\n        });\n      }\n\n      if (_output.length) {\n        outputs = _output.map((output: any) => {\n          return {\n            ...output,\n            canLink: ConstantCanLink[output?.canLink],\n          };\n        });\n      }\n\n      return {\n        id: node.id,\n        content: node.content,\n        disableDrag: node.disableDrag,\n        coordinates: node.coordinates,\n        inputs: inputs,\n        outputs: outputs,\n        render: ConstantNodeBlock[node?.render] || null,\n        data: {\n          ...node.data,\n          id: node.id,\n          content: node.content,\n          onClick: deleteNodeFromSchema,\n        },\n      };\n    });\n\n    links = diagramData?.links;\n\n    return {\n      nodes,\n      links,\n    };\n  };\n\n  let updateStateCreator: any;\n\n  const initialData = getInitialNode();\n  const initialSchema = createSchema(initialData);\n\n  const [schema, { onChange, addNode, removeNode }]: any =\n    useSchema(initialSchema);\n\n  useEffect(() => {\n    setWorkFlowState({\n      currentWorkFlowIndex: 0,\n      flows: [\n        {\n          id: `workflow--${uuidv4()}`,\n          name: \"Workflow 1\",\n          schema: _.cloneDeep(schema),\n        },\n      ],\n    });\n  }, []);\n\n  useEffect(() => {\n    if (schema.links) {\n      const { currentWorkFlowIndex } = workFlowState;\n\n      if (typeof currentWorkFlowIndex !== \"undefined\") {\n        const _workFlowState = _.cloneDeep(workFlowState);\n        const _schema = _.cloneDeep(schema);\n\n        _workFlowState.flows[currentWorkFlowIndex].schema.links = _schema.links;\n\n        setWorkFlowState(_workFlowState);\n        onChange(schema);\n      }\n    }\n  }, [schema.links]);\n\n  updateStateCreator = (type: any, payload: any) => {\n    switch (type) {\n      case types.ON_CHANGE_NODE:\n        const _nodes = _.cloneDeep(schema?.nodes);\n        const index = _nodes.findIndex((node: any) => {\n          if (node.id === payload.id) {\n            return true;\n          }\n\n          return false;\n        });\n\n        if (index >= 0) {\n          delete payload.id;\n\n          _nodes[index] = {\n            ..._nodes[index],\n            data: {\n              ..._nodes[index].data,\n              payload: payload,\n            },\n          };\n\n          const _workFlowState = _.cloneDeep(workFlowState);\n          const { currentWorkFlowIndex } = _workFlowState;\n          _workFlowState.flows[currentWorkFlowIndex].schema.nodes = _nodes;\n\n          setWorkFlowState(_workFlowState);\n          onChange({\n            nodes: _nodes,\n          });\n        }\n\n        return;\n\n      case types.ON_CHANGE_SIDEBAR:\n        return setSidebarState(payload);\n    }\n  };\n\n  const addNewNode = (node: any) => {\n    const _id = `node--${uuidv4()}`;\n    const nodeId = schema.nodes.length + 1;\n    const coordinates = [\n      schema.nodes[nodeId - 2].coordinates[0] + 100,\n      schema.nodes[nodeId - 2].coordinates[1] + 100,\n    ];\n\n    const _input = node?.inputs || 0;\n    const _output = node?.outputs || 0;\n    const inputs = [];\n    const outputs = [];\n\n    if (_input) {\n      for (let i = 0; i < _input; i++) {\n        inputs.push({\n          id: `input-port--${uuidv4()}`,\n          alignment: \"left\",\n          canLink: canAllowToLink,\n        });\n      }\n    }\n\n    if (_output) {\n      for (let j = 0; j < _output; j++) {\n        outputs.push({\n          id: `output-port--${uuidv4()}`,\n          alignment: \"right\",\n          canLink: canAllowToLink,\n        });\n      }\n    }\n\n    const nextNode = {\n      id: _id,\n      content: node.content,\n      render: ConstantNodeBlock[node?.render] || null,\n      coordinates: coordinates,\n      inputs: inputs,\n      outputs: outputs,\n      data: {\n        ...node.data,\n        id: _id,\n        content: node.content,\n        onClick: deleteNodeFromSchema,\n        updateStateCreator: updateStateCreator,\n      },\n    };\n\n    addNode(nextNode);\n    setTimeout(() => {\n      updateWorkFlowState();\n    });\n  };\n\n  deleteNodeFromSchema = (id: any) => {\n    const nodeToRemove = schema.nodes.find((node: any) => {\n      if (node.id === id) {\n        return true;\n      }\n\n      return false;\n    });\n\n    removeNode(nodeToRemove);\n    setTimeout(() => {\n      updateWorkFlowState();\n    });\n  };\n\n  const updateWorkFlowState = () => {\n    const _schema = _.cloneDeep(schema);\n    const _workFlowState = _.cloneDeep(workFlowState);\n    const { currentWorkFlowIndex } = _workFlowState;\n\n    _workFlowState.flows[currentWorkFlowIndex].schema = _schema;\n\n    setWorkFlowState(_workFlowState);\n  };\n\n  const onChangeWorkFlowTabHandler = ({\n    type,\n    workFlowIndex,\n    importSchema,\n  }: any) => {\n    switch (type) {\n      case types.ON_CHANGE_WORKFLOW:\n        const _workFlowState = _.cloneDeep(workFlowState);\n        const selectSchema = _workFlowState.flows[workFlowIndex].schema;\n\n        onChange(selectSchema);\n        setWorkFlowState((prev: any) => ({\n          ...prev,\n          currentWorkFlowIndex: workFlowIndex,\n        }));\n\n        return;\n\n      case types.ON_ADD_WORKFLOW:\n        onChange(initialSchema);\n        setWorkFlowState((prev: any) => ({\n          currentWorkFlowIndex: workFlowIndex,\n          flows: [\n            ...prev.flows,\n            {\n              id: `workflow--${uuidv4()}`,\n              name: `Workflow ${workFlowIndex + 1}`,\n              schema: _.cloneDeep(initialSchema),\n            },\n          ],\n        }));\n\n        return;\n\n      case types.ON_UPDATE_WORKFLOW:\n        const _updateWorkFlowState = _.cloneDeep(workFlowState);\n        const _schema = _.cloneDeep(schema);\n\n        _updateWorkFlowState.flows[workFlowIndex].schema = _schema;\n\n        setWorkFlowState(_updateWorkFlowState);\n\n        return;\n\n      case types.ON_IMPORT_WORKFLOW:\n        debugger;\n\n        const _importSchema = _.cloneDeep(importSchema);\n        const _updateImportWorkFlowState = _.cloneDeep(workFlowState);\n\n        debugger;\n        _updateImportWorkFlowState.flows[workFlowIndex].schema = _importSchema;\n\n        debugger;\n\n        onChange({\n          nodes: [],\n          links: [],\n        });\n\n        const aa = createSchema(_importSchema);\n        onChange(aa);\n\n        setWorkFlowState(_updateImportWorkFlowState);\n\n        return;\n    }\n  };\n\n  // console.log(\"availableNodes => \", availableNodes);\n  // console.log(\"sidebarState => \", sidebarState);\n  console.log(\"workFlowState => \", workFlowState);\n  console.log(\"schema => \", schema);\n\n  return (\n    <>\n      <DesignMenu availableNodes={availableNodes} addNewNode={addNewNode} />\n\n      <SidebarEditor\n        sidebar={sidebarState}\n        updateStateCreator={updateStateCreator}\n      />\n\n      <DiagramPreview\n        schema={schema}\n        onChange={onChange}\n        addNewNode={addNewNode}\n        workFlowState={workFlowState}\n        onChangeWorkFlow={onChangeWorkFlowTabHandler}\n      />\n    </>\n  );\n};\n\nexport default Creator;\n","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/NodeEditor/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DiagramPreview/index.tsx",["146"],"import Diagram from \"beautiful-react-diagrams\";\nimport { useDrop } from \"react-dnd\";\nimport { DRAG_TYPES } from \"../../constants\";\n\nimport WorkFlowTab from \"../WorkFlowTab\";\nimport ActionBar from \"../ActionBar\";\n\nconst selectStyles = (isActive: boolean, canDrop: boolean) => {\n  if (isActive) {\n    return {\n      border: \"2px solid #000\",\n    };\n  } else if (canDrop) {\n    return {\n      border: \"2px dashed #000\",\n    };\n  }\n\n  return {\n    border: \"2px solid #dae1e7\",\n  };\n};\n\nconst DiagramPreview = ({\n  schema,\n  onChange,\n  addNewNode,\n  workFlowState,\n  onChangeWorkFlow,\n}: any) => {\n  const [{ canDrop, isOver }, drop] = useDrop({\n    accept: DRAG_TYPES.NODE_COMPONENT,\n    drop(item: any, monitor: any) {\n      const didDrop = monitor.didDrop();\n\n      if (didDrop) {\n        return;\n      }\n\n      addNewNode(item);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n      isOverCurrent: monitor.isOver({ shallow: true }),\n    }),\n  });\n\n  const isActive = canDrop && isOver;\n  const styles = selectStyles(isActive, canDrop);\n\n  return (\n    <div className=\"rz__canvas\">\n      <WorkFlowTab\n        workFlowState={workFlowState}\n        onChangeWorkFlow={onChangeWorkFlow}\n      />\n\n      <ActionBar\n        workFlowState={workFlowState}\n        onChangeWorkFlow={onChangeWorkFlow}\n      />\n\n      <div\n        ref={drop}\n        // role=\"node\"\n        // style={{ ...styles }}\n        className=\"rz__canvas--preview\"\n      >\n        <Diagram schema={schema} onChange={onChange} />\n      </div>\n    </div>\n  );\n};\n\nexport default DiagramPreview;\n","/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/Home/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/NodeBlock/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DraggableComponent/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DesignMenu/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/NotFound/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/common/Layout/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/common/Loader/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/Creator/data.js",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/utils/helpers.ts",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/constants/index.js",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/Decision/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/Reset/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/WorkflowSwitch/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/Response/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/Webhook/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/API/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/AgentHandover/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/End/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/NotFound/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/Utterance/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/WorkFlowTab/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/ActionBar/index.tsx",["147"],"import React, { useState } from \"react\";\nimport _ from \"lodash\";\nimport exportFromJSON from \"export-from-json\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nimport { types } from \"../../constants\";\nimport validateFlowJSON from \"../../utils/validateFlowJSON\";\nimport ImportDialog from \"../ImportDialog\";\n\nconst Alert = (props: any) => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nconst ActionBar = ({ workFlowState, onChangeWorkFlow }: any) => {\n  const [open, setOpen] = useState({\n    isOpen: false,\n    message: \"\",\n    severity: \"\",\n  });\n  const [isOpenImport, setIsOpenImport] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const onClickMenu = (event: any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const onCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const handleClose = (_: any, reason: any) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen({\n      isOpen: false,\n      message: \"\",\n      severity: \"\",\n    });\n  };\n\n  const setImportDialogActive = (value: any) => {\n    setIsOpenImport(value);\n  };\n\n  const onClickCopyClipboard = () => {\n    const { currentWorkFlowIndex } = workFlowState;\n    const data = workFlowState.flows[currentWorkFlowIndex];\n    const fileName = `${data.name}`;\n\n    navigator.clipboard.writeText(JSON.stringify(data));\n    setOpen({\n      isOpen: true,\n      message: `[${fileName}] Successfully copied in clipboard`,\n      severity: \"success\",\n    });\n  };\n\n  const onClickExport = () => {\n    const { currentWorkFlowIndex } = workFlowState;\n    const data = workFlowState.flows[currentWorkFlowIndex];\n    const fileName = `${data.name}`;\n    const exportType = exportFromJSON.types.json;\n\n    exportFromJSON({ data, fileName, exportType });\n    setOpen({\n      isOpen: true,\n      message: `[${fileName}] Successfully exported`,\n      severity: \"success\",\n    });\n  };\n\n  const importFlowData = (jsonFlowString: any) => {\n    debugger;\n    const jsonFlow = validateFlowJSON(jsonFlowString);\n\n    if (!jsonFlow) {\n      setOpen({\n        isOpen: true,\n        message: `Not a valid Flow`,\n        severity: \"error\",\n      });\n    } else {\n      debugger;\n      const { currentWorkFlowIndex } = workFlowState;\n      debugger;\n\n      onChangeWorkFlow({\n        type: types.ON_IMPORT_WORKFLOW,\n        workFlowIndex: currentWorkFlowIndex,\n        importSchema: jsonFlow.schema,\n      });\n\n      setOpen({\n        isOpen: true,\n        message: `Successfully Workflow imported`,\n        severity: \"success\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"rz__action-bar\">\n      <Button variant=\"contained\" color=\"secondary\">\n        Delete\n      </Button>\n\n      <ButtonGroup disableElevation variant=\"contained\">\n        <Button>Reset</Button>\n        <Button>Save</Button>\n      </ButtonGroup>\n\n      <div>\n        <Button\n          aria-controls=\"simple-menu\"\n          aria-haspopup=\"true\"\n          variant=\"contained\"\n          onClick={onClickMenu}\n        >\n          Menu\n        </Button>\n\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={onCloseMenu}\n        >\n          <MenuItem onClick={() => setImportDialogActive(true)}>\n            Import\n          </MenuItem>\n          <MenuItem onClick={onClickCopyClipboard}>Copy Clipboard</MenuItem>\n          <MenuItem onClick={onClickExport}>Export</MenuItem>\n        </Menu>\n\n        <Snackbar\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n          open={open.isOpen}\n          autoHideDuration={6000}\n          onClose={handleClose}\n        >\n          <Alert onClose={handleClose} severity={open.severity || \"info\"}>\n            {open.message}\n          </Alert>\n        </Snackbar>\n\n        <ImportDialog\n          open={isOpenImport}\n          onClose={() => setImportDialogActive(false)}\n          onImport={(jsonData: any) => importFlowData(jsonData)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ActionBar;\n","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/ImportDialog/index.js",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/utils/validateFlowJSON.ts",[],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":117,"column":6,"nodeType":"154","endLine":117,"endColumn":8,"suggestions":"155"},{"ruleId":"152","severity":1,"message":"156","line":133,"column":6,"nodeType":"154","endLine":133,"endColumn":20,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":50,"column":9,"nodeType":"160","messageId":"161","endLine":50,"endColumn":15},{"ruleId":"158","severity":1,"message":"162","line":2,"column":8,"nodeType":"160","messageId":"161","endLine":2,"endColumn":9},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'schema'. Either include it or remove the dependency array.","ArrayExpression",["165"],"React Hook useEffect has missing dependencies: 'onChange', 'schema', and 'workFlowState'. Either include them or remove the dependency array.",["166"],"@typescript-eslint/no-unused-vars","'styles' is assigned a value but never used.","Identifier","unusedVar","'_' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [schema]",{"range":"171","text":"172"},"Update the dependencies array to be: [onChange, schema, schema.links, workFlowState]",{"range":"173","text":"174"},[2616,2618],"[schema]",[3052,3066],"[onChange, schema, schema.links, workFlowState]"]