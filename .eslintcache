[{"/Users/devendra/Desktop/POC/poc-bot-builder/src/index.tsx":"1","/Users/devendra/Desktop/POC/poc-bot-builder/src/reportWebVitals.ts":"2","/Users/devendra/Desktop/POC/poc-bot-builder/src/App.tsx":"3","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/index.tsx":"4","/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/index.tsx":"5","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/Creator/index.tsx":"6","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/NodeEditor/index.tsx":"7","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DiagramPreview/index.tsx":"8","/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/Home/index.tsx":"9","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/NodeBlock/index.tsx":"10","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DraggableComponent/index.tsx":"11","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/index.tsx":"12","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DesignMenu/index.tsx":"13","/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/NotFound/index.tsx":"14","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/common/Layout/index.tsx":"15","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/common/Loader/index.tsx":"16","/Users/devendra/Desktop/POC/poc-bot-builder/src/utils/helpers.ts":"17","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/index.tsx":"18","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/WorkFlowTab/index.tsx":"19","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/ActionBar/index.tsx":"20","/Users/devendra/Desktop/POC/poc-bot-builder/src/utils/validateFlowJSON.ts":"21","/Users/devendra/Desktop/POC/poc-bot-builder/src/constants/index.ts":"22","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/ImportDialog/index.tsx":"23","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/Creator/data.ts":"24","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/ResponseNode/index.tsx":"25","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/DecisionNode/index.tsx":"26","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/AgentHandoverNode/index.tsx":"27","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/WebhookNode/index.tsx":"28","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/ApiNode/index.tsx":"29","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/EndNode/index.tsx":"30","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/NotFoundNode/index.tsx":"31","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/WorkflowSwitchNode/index.tsx":"32","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/EntityNode/index.tsx":"33","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/QuestionNode/index.tsx":"34","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/CustomCodeNode/index.tsx":"35","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/index.tsx":"36","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Form/index.tsx":"37","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Title/index.tsx":"38","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/DividerText/index.tsx":"39","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/IconButton/index.tsx":"40","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Checkbox/index.tsx":"41","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Button/index.tsx":"42","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/DataTimePicker/index.tsx":"43","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/ButtonGroup/index.tsx":"44","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Select/index.tsx":"45","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/TextField/index.tsx":"46","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/ConditionalField/index.tsx":"47","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Paper/index.tsx":"48"},{"size":648,"mtime":1627575430899,"results":"49","hashOfConfig":"50"},{"size":425,"mtime":1609911194000,"results":"51","hashOfConfig":"50"},{"size":531,"mtime":1626442372167,"results":"52","hashOfConfig":"50"},{"size":734,"mtime":1628138517988,"results":"53","hashOfConfig":"50"},{"size":153,"mtime":1626585548468,"results":"54","hashOfConfig":"50"},{"size":8896,"mtime":1628098232404,"results":"55","hashOfConfig":"50"},{"size":799,"mtime":1627878439626,"results":"56","hashOfConfig":"50"},{"size":1608,"mtime":1627808160635,"results":"57","hashOfConfig":"50"},{"size":173,"mtime":1626443449640,"results":"58","hashOfConfig":"50"},{"size":1604,"mtime":1627878443562,"results":"59","hashOfConfig":"50"},{"size":1020,"mtime":1627808128360,"results":"60","hashOfConfig":"50"},{"size":1424,"mtime":1628049830089,"results":"61","hashOfConfig":"50"},{"size":731,"mtime":1627735269687,"results":"62","hashOfConfig":"50"},{"size":220,"mtime":1626442041240,"results":"63","hashOfConfig":"50"},{"size":188,"mtime":1627745468807,"results":"64","hashOfConfig":"50"},{"size":82,"mtime":1626585440168,"results":"65","hashOfConfig":"50"},{"size":194,"mtime":1626694071195,"results":"66","hashOfConfig":"50"},{"size":662,"mtime":1628049836722,"results":"67","hashOfConfig":"50"},{"size":1470,"mtime":1628098163520,"results":"68","hashOfConfig":"50"},{"size":4208,"mtime":1627808154861,"results":"69","hashOfConfig":"50"},{"size":475,"mtime":1627796899278,"results":"70","hashOfConfig":"50"},{"size":342,"mtime":1627808101496,"results":"71","hashOfConfig":"50"},{"size":1645,"mtime":1628049026858,"results":"72","hashOfConfig":"50"},{"size":6768,"mtime":1628147149128,"results":"73","hashOfConfig":"50"},{"size":3957,"mtime":1628161611962,"results":"74","hashOfConfig":"50"},{"size":7800,"mtime":1627906250050,"results":"75","hashOfConfig":"50"},{"size":4391,"mtime":1628160827449,"results":"76","hashOfConfig":"50"},{"size":1479,"mtime":1628161627988,"results":"77","hashOfConfig":"50"},{"size":8926,"mtime":1628161333855,"results":"78","hashOfConfig":"50"},{"size":3954,"mtime":1628161401309,"results":"79","hashOfConfig":"50"},{"size":384,"mtime":1628161551436,"results":"80","hashOfConfig":"50"},{"size":2227,"mtime":1628161645276,"results":"81","hashOfConfig":"50"},{"size":5368,"mtime":1628161439537,"results":"82","hashOfConfig":"50"},{"size":2073,"mtime":1628049145875,"results":"83","hashOfConfig":"50"},{"size":1490,"mtime":1628160917411,"results":"84","hashOfConfig":"50"},{"size":712,"mtime":1628147379843,"results":"85","hashOfConfig":"50"},{"size":577,"mtime":1628138887975,"results":"86","hashOfConfig":"50"},{"size":417,"mtime":1628138928420,"results":"87","hashOfConfig":"50"},{"size":772,"mtime":1628138877282,"results":"88","hashOfConfig":"50"},{"size":592,"mtime":1628138895336,"results":"89","hashOfConfig":"50"},{"size":1412,"mtime":1628146071819,"results":"90","hashOfConfig":"50"},{"size":312,"mtime":1628138941263,"results":"91","hashOfConfig":"50"},{"size":619,"mtime":1628138869250,"results":"92","hashOfConfig":"50"},{"size":627,"mtime":1628158730733,"results":"93","hashOfConfig":"50"},{"size":1570,"mtime":1628157912446,"results":"94","hashOfConfig":"50"},{"size":1239,"mtime":1628157916103,"results":"95","hashOfConfig":"50"},{"size":530,"mtime":1628144987703,"results":"96","hashOfConfig":"50"},{"size":460,"mtime":1628158336421,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1dtcyry",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"100"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/devendra/Desktop/POC/poc-bot-builder/src/index.tsx",[],["197","198"],"/Users/devendra/Desktop/POC/poc-bot-builder/src/reportWebVitals.ts",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/App.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/Creator/index.tsx",["199","200"],"import { useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport _ from \"lodash\";\nimport {\n  createSchema,\n  useSchema,\n  //   validateNode,\n  //   validateNodes,\n  //   validateSchema,\n  //   validateLink,\n  //   validateLinks,\n  //   validatePort,\n} from \"beautiful-react-diagrams\";\n\nimport { canAllowToLink } from \"../../utils/helpers\";\nimport { types } from \"../../constants\";\nimport {\n  NodeBlock,\n  DiagramPreview,\n  DesignMenu,\n  SidebarEditor,\n} from \"../../components\";\n// import DiagramPreview from \"../DiagramPreview\";\n\nimport { availableNodesData, diagramData, initialWorkflowState } from \"./data\";\n\nconst ConstantNodeBlock: any = {\n  NodeBlock: NodeBlock,\n};\n\nconst ConstantCanLink: any = {\n  canAllowToLink: canAllowToLink,\n};\n\nconst Creator = () => {\n  let updateStateCreator: any;\n  let deleteNodeFromSchema: any;\n\n  const [availableNodes] = useState<any>(availableNodesData);\n  const [workFlowState, setWorkFlowState] = useState<any>({});\n  const [sidebarState, setSidebarState] = useState<any>({\n    isOpen: false,\n    data: {},\n  });\n\n  const getInitialNode: any = (payload: any) => {\n    let nodes: any = [];\n    let links: any = [];\n\n    nodes = payload?.nodes?.map((node: any) => {\n      const _input = node?.inputs || [];\n      const _output = node?.outputs || [];\n      let inputs = [];\n      let outputs = [];\n\n      if (_input.length) {\n        inputs = _input.map((input: any) => {\n          return {\n            ...input,\n            canLink: ConstantCanLink[node?.data?.helper?.canLinkInput],\n          };\n        });\n      }\n\n      if (_output.length) {\n        outputs = _output.map((output: any) => {\n          return {\n            ...output,\n            canLink: ConstantCanLink[node?.data?.helper?.canLinkOutput],\n          };\n        });\n      }\n\n      return {\n        id: node.id,\n        content: node.content,\n        disableDrag: node.disableDrag,\n        coordinates: node.coordinates,\n        inputs: inputs,\n        outputs: outputs,\n        render: ConstantNodeBlock[node?.data?.helper?.renderNode] || null,\n        data: {\n          ...node.data,\n          id: node.id,\n          content: node.content,\n          onClick: deleteNodeFromSchema,\n          updateStateCreator: updateStateCreator,\n        },\n      };\n    });\n\n    links = payload?.links;\n\n    return {\n      nodes,\n      links,\n    };\n  };\n\n  const initialData = getInitialNode(diagramData);\n  const initialSchema = createSchema(initialData);\n\n  const [schema, { onChange, addNode, removeNode, connect }]: any =\n    useSchema(initialSchema);\n\n  useEffect(() => {\n    setWorkFlowState(initialWorkflowState(schema));\n  }, []);\n  // }, [schema]);\n\n  useEffect(() => {\n    if (schema.links) {\n      const { currentWorkFlowIndex } = workFlowState;\n\n      if (typeof currentWorkFlowIndex !== \"undefined\") {\n        const _workFlowState = _.cloneDeep(workFlowState);\n        const _schema = _.cloneDeep(schema);\n\n        _workFlowState.flows[currentWorkFlowIndex].schema.links = _schema.links;\n\n        setWorkFlowState(_workFlowState);\n        onChange(schema);\n      }\n    }\n    // }, [schema.links]);\n  }, [schema.links]);\n\n  updateStateCreator = (type: any, editorData: any) => {\n    switch (type) {\n      case types.ON_CHANGE_NODE:\n        const _nodes = _.cloneDeep(schema?.nodes);\n        const index = _nodes.findIndex((node: any) => {\n          if (node.id === editorData.id) {\n            return true;\n          }\n\n          return false;\n        });\n\n        if (index >= 0) {\n          const _payload = _.cloneDeep(editorData?.payload);\n\n          _nodes[index] = {\n            ..._nodes[index],\n            data: {\n              ..._nodes[index].data,\n              payload: _payload,\n            },\n          };\n\n          const _workFlowState = _.cloneDeep(workFlowState);\n          const { currentWorkFlowIndex } = _workFlowState;\n          _workFlowState.flows[currentWorkFlowIndex].schema.nodes = _nodes;\n\n          setWorkFlowState(_workFlowState);\n          onChange({\n            nodes: _nodes,\n          });\n        }\n\n        return;\n\n      case types.ON_CHANGE_SIDEBAR:\n        return setSidebarState(editorData);\n    }\n  };\n\n  const addNewNode = (node: any) => {\n    const _id = `node--${uuidv4()}`;\n    const nodeId = schema.nodes.length + 1;\n    const coordinates = [\n      schema.nodes[nodeId - 2].coordinates[0] + 100,\n      schema.nodes[nodeId - 2].coordinates[1] + 100,\n    ];\n\n    const _input = node?.inputs || 0;\n    const _output = node?.outputs || 0;\n    const inputs = [];\n    const outputs = [];\n\n    if (_input) {\n      for (let i = 0; i < _input; i++) {\n        inputs.push({\n          id: `input-port--${uuidv4()}`,\n          alignment: \"left\",\n          canLink: ConstantCanLink[node?.data?.helper?.canLinkInput],\n        });\n      }\n    }\n\n    if (_output) {\n      for (let j = 0; j < _output; j++) {\n        outputs.push({\n          id: `output-port--${uuidv4()}`,\n          alignment: \"right\",\n          canLink: ConstantCanLink[node?.data?.helper?.canLinkOutput],\n        });\n      }\n    }\n\n    const nextNode = {\n      id: _id,\n      content: node.content,\n      disableDrag: node.disableDrag,\n      render: ConstantNodeBlock[node?.data?.helper?.renderNode] || null,\n      coordinates: coordinates,\n      inputs: inputs,\n      outputs: outputs,\n      data: {\n        ...node.data,\n        id: _id,\n        content: node.content,\n        onClick: deleteNodeFromSchema,\n        updateStateCreator: updateStateCreator,\n      },\n    };\n\n    addNode(nextNode);\n    setTimeout(() => {\n      updateWorkFlowState();\n    });\n  };\n\n  deleteNodeFromSchema = (id: any) => {\n    const _schema = _.cloneDeep(schema);\n\n    const nodeToRemove = _schema?.nodes?.find((node: any) => {\n      if (node.id === id) {\n        return true;\n      }\n      return false;\n    });\n\n    if (nodeToRemove) {\n      removeNode(nodeToRemove);\n      setTimeout(() => {\n        updateWorkFlowState();\n      });\n    }\n  };\n\n  const updateWorkFlowState = () => {\n    const _schema = _.cloneDeep(schema);\n    const _workFlowState = _.cloneDeep(workFlowState);\n    const { currentWorkFlowIndex } = _workFlowState;\n\n    _workFlowState.flows[currentWorkFlowIndex].schema = _schema;\n\n    setWorkFlowState(_workFlowState);\n  };\n\n  const onChangeWorkFlowTabHandler = ({\n    type,\n    workFlowIndex,\n    importSchema,\n  }: any) => {\n    switch (type) {\n      case types.ON_CHANGE_WORKFLOW:\n        const _workFlowState = _.cloneDeep(workFlowState);\n        const selectSchema = _workFlowState.flows[workFlowIndex].schema;\n\n        onChange(selectSchema);\n        setWorkFlowState((prev: any) => ({\n          ...prev,\n          currentWorkFlowIndex: workFlowIndex,\n        }));\n\n        return;\n\n      case types.ON_ADD_WORKFLOW:\n        onChange(initialSchema);\n        setWorkFlowState((prev: any) => ({\n          currentWorkFlowIndex: workFlowIndex,\n          flows: [\n            ...prev.flows,\n            {\n              id: `workflow--${uuidv4()}`,\n              name: `Workflow ${workFlowIndex + 1}`,\n              schema: _.cloneDeep(initialSchema),\n            },\n          ],\n        }));\n\n        return;\n\n      case types.ON_UPDATE_WORKFLOW:\n        const _updateWorkFlowState = _.cloneDeep(workFlowState);\n        const _schema = _.cloneDeep(schema);\n\n        _updateWorkFlowState.flows[workFlowIndex].schema = _schema;\n\n        setWorkFlowState(_updateWorkFlowState);\n\n        return;\n\n      case types.ON_IMPORT_WORKFLOW:\n        const payload = _.cloneDeep(importSchema);\n        const _importSchema = getInitialNode(payload);\n\n        const _updateImportWorkFlowState = _.cloneDeep(workFlowState);\n        const _updatedSchema: any = createSchema(_importSchema);\n        _updateImportWorkFlowState.flows[workFlowIndex].schema = _updatedSchema;\n\n        setWorkFlowState(_updateImportWorkFlowState);\n\n        schema.nodes.forEach((node: any) => {\n          removeNode(node);\n        });\n        _updatedSchema?.nodes.forEach((node: any) => {\n          addNode(node);\n        });\n        _updatedSchema?.links.forEach((link: any) => {\n          const inputId = link.input || \"\";\n          const outputId = link.output || \"\";\n          connect(inputId, outputId);\n        });\n\n        return;\n    }\n  };\n\n  // console.log(\"availableNodes => \", availableNodes);\n  // console.log(\"sidebarState => \", sidebarState);\n  console.log(\"workFlowState => \", workFlowState);\n  console.log(\"schema => \", schema);\n\n  return (\n    <>\n      <DesignMenu availableNodes={availableNodes} addNewNode={addNewNode} />\n\n      <SidebarEditor\n        sidebar={sidebarState}\n        updateStateCreator={updateStateCreator}\n      />\n\n      <DiagramPreview\n        schema={schema}\n        onChange={onChange}\n        addNewNode={addNewNode}\n        workFlowState={workFlowState}\n        onChangeWorkFlow={onChangeWorkFlowTabHandler}\n      />\n    </>\n  );\n};\n\nexport default Creator;\n","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/NodeEditor/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DiagramPreview/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/Home/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/NodeBlock/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DraggableComponent/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/DesignMenu/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/containers/NotFound/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/common/Layout/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/common/Loader/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/utils/helpers.ts",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/WorkFlowTab/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/ActionBar/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/utils/validateFlowJSON.ts",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/constants/index.ts",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/ImportDialog/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/Creator/data.ts",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/ResponseNode/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/DecisionNode/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/AgentHandoverNode/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/WebhookNode/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/ApiNode/index.tsx",["201"],"import { Fragment, useState } from \"react\";\nimport * as Yup from \"yup\";\nimport { FieldArray } from \"formik\";\nimport _ from \"lodash\";\nimport { Grid, Box, Tabs, Tab } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { initialStateAPINode } from \"../../../Creator/data\";\nimport {\n  Form,\n  TextField,\n  ButtonGroup,\n  Button,\n  Title,\n  Select,\n  IconButton,\n  Paper,\n} from \"../../../FormsUI\";\n\nconst FORM_VALIDATION = Yup.object().shape({\n  apiCall: Yup.string().required(\"Field is required\"),\n  apiEndPoint: Yup.string().required(\"Field is required\"),\n  requestType: Yup.string().required(\"Field is required\"),\n  body: Yup.array().of(\n    Yup.object().shape({\n      key: Yup.string().required(\"Field is required\"),\n      value: Yup.string().required(\"Field is required\"),\n    })\n  ),\n  headers: Yup.array().of(\n    Yup.object().shape({\n      key: Yup.string().required(\"Field is required\"),\n      value: Yup.string().required(\"Field is required\"),\n    })\n  ),\n});\n\nconst TabPanel = (props: any) => {\n  const { children, value, index, className, ...other } = props;\n\n  return (\n    <Box role=\"tabpanel\" hidden={value !== index} {...other}>\n      {value === index && <Box>{children}</Box>}\n    </Box>\n  );\n};\n\nconst ApiNode = ({ data, onSuccess, onCancel }: any) => {\n  const INITIAL_FORM_STATE = {\n    apiCall: data?.payload?.apiCall,\n    apiEndPoint: data?.payload?.apiEndPoint,\n    requestType: data?.payload?.requestType,\n    body: data?.payload?.body,\n    headers: data?.payload?.headers,\n  };\n\n  const [tab, setTab] = useState(0);\n  const onChangeTab = (_: any, newValue: any) => {\n    setTab(newValue);\n  };\n\n  const onSubmitHandler = (values: any) => {\n    console.log(values);\n\n    onSuccess({\n      id: data?.id,\n      payload: values,\n    });\n  };\n\n  return (\n    <Box className=\"rz__editor--block\">\n      <Title>API Node</Title>\n\n      <Form\n        initialValues={{\n          ...INITIAL_FORM_STATE,\n        }}\n        validationSchema={FORM_VALIDATION}\n        onSubmit={onSubmitHandler}\n        render={({ errors, values }: any) => {\n          console.log(\"errors\", errors);\n          return (\n            <>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField name=\"apiCall\" label=\"API Call\" />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <TextField name=\"apiEndPoint\" label=\"API End Point\" />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Select\n                    name=\"requestType\"\n                    label=\"Request Type\"\n                    options={{\n                      GET: \"Get\",\n                      POST: \"Post\",\n                      PUT: \"PUT\",\n                      DELETE: \"Delete\",\n                    }}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Tabs\n                    value={tab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={onChangeTab}\n                  >\n                    <Tab label=\"Request Body\" />\n                    <Tab label=\"Authentication\" />\n                  </Tabs>\n\n                  <Paper>\n                    <TabPanel value={tab} index={0}>\n                      <FieldArray\n                        name=\"body\"\n                        render={(arrayHelpers: any) => {\n                          const body = values.body;\n\n                          return (\n                            <Grid container spacing={2}>\n                              {body.map((_: any, index: any) => (\n                                <Fragment key={`${index}`}>\n                                  <Grid item xs={5}>\n                                    <TextField\n                                      label={`Key ${index + 1}`}\n                                      name={`body.${index}.key`}\n                                    />\n                                  </Grid>\n                                  <Grid item xs={5}>\n                                    <TextField\n                                      label={`Value ${index + 1}`}\n                                      name={`body.${index}.value`}\n                                    />\n                                  </Grid>\n                                  <Grid item xs={2}>\n                                    <IconButton\n                                      onClick={() => {\n                                        arrayHelpers.remove(index);\n                                      }}\n                                    >\n                                      <DeleteIcon />\n                                    </IconButton>\n                                  </Grid>\n                                </Fragment>\n                              ))}\n\n                              <Grid item xs={5}>\n                                <ButtonGroup>\n                                  <Button\n                                    onClick={() => {\n                                      arrayHelpers.push({\n                                        ...initialStateAPINode.body[0],\n                                      });\n                                    }}\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    size=\"medium\"\n                                    startIcon={<AddIcon />}\n                                  >\n                                    Add\n                                  </Button>\n                                </ButtonGroup>\n                              </Grid>\n                            </Grid>\n                          );\n                        }}\n                      />\n                    </TabPanel>\n\n                    <TabPanel value={tab} index={1}>\n                      <FieldArray\n                        name=\"headers\"\n                        render={(arrayHelpers: any) => {\n                          const headers = values.headers;\n\n                          return (\n                            <Grid container spacing={2}>\n                              {headers.map((_: any, index: any) => (\n                                <Fragment key={`${index}`}>\n                                  <Grid item xs={5}>\n                                    <TextField\n                                      label={`Key ${index + 1}`}\n                                      name={`headers.${index}.key`}\n                                    />\n                                  </Grid>\n                                  <Grid item xs={5}>\n                                    <TextField\n                                      label={`Value ${index + 1}`}\n                                      name={`headers.${index}.value`}\n                                    />\n                                  </Grid>\n                                  <Grid item xs={2}>\n                                    <IconButton\n                                      onClick={() => {\n                                        arrayHelpers.remove(index);\n                                      }}\n                                    >\n                                      <DeleteIcon />\n                                    </IconButton>\n                                  </Grid>\n                                </Fragment>\n                              ))}\n\n                              <Grid item xs={5}>\n                                <ButtonGroup>\n                                  <Button\n                                    onClick={() => {\n                                      arrayHelpers.push({\n                                        ...initialStateAPINode.body[0],\n                                      });\n                                    }}\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    size=\"medium\"\n                                    startIcon={<AddIcon />}\n                                  >\n                                    Add\n                                  </Button>\n                                </ButtonGroup>\n                              </Grid>\n                            </Grid>\n                          );\n                        }}\n                      />\n                    </TabPanel>\n                  </Paper>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <ButtonGroup>\n                    <Button onClick={onCancel}>Cancel</Button>\n                    <Button type=\"submit\" color=\"primary\">\n                      Save\n                    </Button>\n                  </ButtonGroup>\n                </Grid>\n              </Grid>\n            </>\n          );\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default ApiNode;\n","/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/EndNode/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/NotFoundNode/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/WorkflowSwitchNode/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/EntityNode/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/QuestionNode/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/SidebarEditor/components/CustomCodeNode/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Form/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Title/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/DividerText/index.tsx",["202"],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/IconButton/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Checkbox/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Button/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/DataTimePicker/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/ButtonGroup/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Select/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/TextField/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/ConditionalField/index.tsx",[],"/Users/devendra/Desktop/POC/poc-bot-builder/src/components/FormsUI/Paper/index.tsx",[],{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":108,"column":6,"nodeType":"209","endLine":108,"endColumn":8,"suggestions":"210"},{"ruleId":"207","severity":1,"message":"211","line":126,"column":6,"nodeType":"209","endLine":126,"endColumn":20,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":4,"column":8,"nodeType":"215","messageId":"216","endLine":4,"endColumn":9},{"ruleId":"213","severity":1,"message":"217","line":3,"column":10,"nodeType":"215","messageId":"216","endLine":3,"endColumn":18},"no-native-reassign",["218"],"no-negated-in-lhs",["219"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'schema'. Either include it or remove the dependency array.","ArrayExpression",["220"],"React Hook useEffect has missing dependencies: 'onChange', 'schema', and 'workFlowState'. Either include them or remove the dependency array.",["221"],"@typescript-eslint/no-unused-vars","'_' is defined but never used.","Identifier","unusedVar","'relative' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},"Update the dependencies array to be: [schema]",{"range":"226","text":"227"},"Update the dependencies array to be: [onChange, schema, schema.links, workFlowState]",{"range":"228","text":"229"},[2652,2654],"[schema]",[3134,3148],"[onChange, schema, schema.links, workFlowState]"]